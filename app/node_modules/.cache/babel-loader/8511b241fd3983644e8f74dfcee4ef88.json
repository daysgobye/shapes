{"ast":null,"code":"import _objectSpread from \"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/coles/Documents/brett/react/shapes/app/src/componets/canvas.js\";\nimport React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nimport Canvg from \"canvg\"; // import logo from \"./logo.svg\";\n// import icon from \"../ic.svg\";\n\nimport Konva from \"konva\";\nimport { Stage, Layer, Image, Rect } from \"react-konva\";\nimport SvgRender from \"./svgRender\";\nimport DlButton from \"./dlButton\";\nimport { placement, placeInZone, placementInter, checkOverLap } from \"../helpers.js/placement\";\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.posAllShapes = () => {\n      this.savedRender = [];\n      this.setState({\n        shapes: this.props.shapes\n      });\n    };\n\n    this.savedRender = [];\n\n    this.renderArrayOfShapes = shape => {\n      let array = [];\n      let loopShape = [];\n      let count = 0;\n      console.log(shape, \"I need this shape flag\");\n\n      while (loopShape.length < shape.numToRender && count < 1000) {\n        let x = placeInZone(window.innerWidth - this.state.sideBar, shape);\n        let y = placeInZone(window.innerHeight, shape);\n        let noIn = true;\n        const overlap = 100 * shape.scale; // let pos=placementInter( window,[...this.savedRender,...loopShape] )\n\n        let otherBodys = [...loopShape, ...this.savedRender];\n\n        for (let i = 0; i < otherBodys.flat().length; i++) {\n          const pos = otherBodys.flat()[i];\n\n          if (pos.pos && checkOverLap(y, x, pos, shape)) {\n            console.log(\"overlap\");\n            noIn = false;\n            count++;\n          }\n        }\n\n        if (noIn) {\n          array.push(React.createElement(SvgRender, {\n            key: `img${array.length * y * x}`,\n            src: shape.image,\n            x: x,\n            y: y,\n            scale: shape.minSize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }));\n          loopShape.push(_objectSpread({}, shape, {\n            pos: {\n              x,\n              y\n            }\n          }));\n        }\n      }\n\n      this.savedRender.push(loopShape);\n      return array;\n    };\n\n    this.shapeRender = () => {\n      const render = this.state.shapes.map(shape => {\n        return this.renderArrayOfShapes(shape);\n      }); // this.savedRender = render;\n\n      return render;\n    };\n\n    this.state = {\n      shapes: [],\n      sideBar: 100\n    };\n    this.stageRef = React.createRef();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Stage, {\n      ref: this.stageRef,\n      width: window.innerWidth - this.state.sideBar,\n      height: window.innerHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Rect, {\n      x: 0,\n      y: 0,\n      width: window.innerWidth - this.state.sideBar,\n      height: window.innerHeight,\n      fill: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.shapeRender())), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.posAllShapes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"mix\"), React.createElement(DlButton, {\n      stageRef: this.stageRef,\n      savedRender: this.savedRender,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/coles/Documents/brett/react/shapes/app/src/componets/canvas.js"],"names":["React","Component","Button","Canvg","Konva","Stage","Layer","Image","Rect","SvgRender","DlButton","placement","placeInZone","placementInter","checkOverLap","Canvas","constructor","props","posAllShapes","savedRender","setState","shapes","renderArrayOfShapes","shape","array","loopShape","count","console","log","length","numToRender","x","window","innerWidth","state","sideBar","y","innerHeight","noIn","overlap","scale","otherBodys","i","flat","pos","push","image","minSize","shapeRender","render","map","stageRef","createRef","display","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nimport Canvg from \"canvg\";\n// import logo from \"./logo.svg\";\n// import icon from \"../ic.svg\";\nimport Konva from \"konva\";\nimport { Stage, Layer, Image, Rect } from \"react-konva\";\nimport SvgRender from \"./svgRender\";\nimport DlButton from \"./dlButton\";\nimport {\n  placement,\n  placeInZone,\n  placementInter,\n  checkOverLap\n} from \"../helpers.js/placement\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { shapes: [], sideBar: 100 };\n    this.stageRef = React.createRef();\n  }\n  posAllShapes = () => {\n    this.savedRender = [];\n    this.setState({\n      shapes: this.props.shapes\n    });\n  };\n  savedRender = [];\n  renderArrayOfShapes = shape => {\n    let array = [];\n    let loopShape = [];\n    let count = 0;\n    console.log(shape, \"I need this shape flag\");\n\n    while (loopShape.length < shape.numToRender && count < 1000) {\n      let x = placeInZone(window.innerWidth - this.state.sideBar, shape);\n      let y = placeInZone(window.innerHeight, shape);\n      let noIn = true;\n      const overlap = 100 * shape.scale;\n      // let pos=placementInter( window,[...this.savedRender,...loopShape] )\n      let otherBodys = [...loopShape, ...this.savedRender];\n      for (let i = 0; i < otherBodys.flat().length; i++) {\n        const pos = otherBodys.flat()[i];\n        if (pos.pos && checkOverLap(y, x, pos, shape)) {\n          console.log(\"overlap\");\n          noIn = false;\n          count++;\n        }\n      }\n      if (noIn) {\n        array.push(\n          <SvgRender\n            key={`img${array.length * y * x}`}\n            src={shape.image}\n            x={x}\n            y={y}\n            scale={shape.minSize}\n          />\n        );\n        loopShape.push({ ...shape, pos: { x, y } });\n      }\n    }\n    this.savedRender.push(loopShape);\n    return array;\n  };\n\n  shapeRender = () => {\n    const render = this.state.shapes.map(shape => {\n      return this.renderArrayOfShapes(shape);\n    });\n    // this.savedRender = render;\n    return render;\n  };\n\n  render() {\n    return (\n      <>\n        <Stage\n          ref={this.stageRef}\n          width={window.innerWidth - this.state.sideBar}\n          height={window.innerHeight}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={window.innerWidth - this.state.sideBar}\n              height={window.innerHeight}\n              fill=\"white\"\n            />\n          </Layer>\n          <Layer>\n            {this.shapeRender()}\n            {/* <SvgRender src={icon} x={300} y={800} scale={8} /> */}\n          </Layer>\n        </Stage>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <Button onClick={this.posAllShapes}>mix</Button>\n          <DlButton\n            stageRef={this.stageRef}\n            savedRender={this.savedRender}\n          ></DlButton>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}
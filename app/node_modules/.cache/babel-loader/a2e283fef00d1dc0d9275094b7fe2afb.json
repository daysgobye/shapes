{"ast":null,"code":"var _jsxFileName = \"/Users/coles/Documents/brett/react/shapes/app/src/componets/canvas.js\";\nimport React, { Component } from \"react\";\nimport Canvg from \"canvg\";\nimport logo from \"./logo.svg\";\nimport icon from \"../ic.svg\";\nimport Konva from \"konva\";\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.v = null;\n\n    this.load = async () => {\n      var stage = new Konva.Stage({\n        container: \"container\",\n        width: width,\n        height: height\n      });\n      var layer = new Konva.Layer();\n      stage.add(layer);\n      const canvas = document.querySelector(\"canvas\");\n      const ctx = canvas.getContext(\"2d\"); // this.v = await Canvg.from(ctx, icon);\n      // console.log(this.v, ctx);\n      // // Start SVG rendering with animations and mouse handling.\n      // ctx.fillStyle = \"black\";\n      // ctx.fillRect(0, 0, canvas.width, canvas.height);\n      // Canvg(document.getElementById(\"canvas\"), icon, {\n      //   ignoreClear: true,\n      //   ignoreMouse: true\n      // });\n      // Canvg(document.getElementById(\"canvas\"), logo, {\n      //   ignoreClear: true,\n      //   ignoreMouse: true\n      // });\n      // this.v.start();\n      // ctx.fillStyle = \"black\";\n      // ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      Konva.Image.fromURL(icon, imageNode => {\n        layer.add(imageNode);\n        imageNode.setAttrs({\n          width: 150,\n          height: 150\n        });\n        layer.batchDraw();\n      }); // draw svg with external library\n      //     Canvg(canvas, icon, {\n      //       renderCallback: function() {\n      //         var image = new Konva.Image({\n      //           image: canvas,\n      //           x: 200,\n      //           width: 150,\n      //           height: 150\n      //         });\n      //         layer.add(image);\n      //         layer.batchDraw();\n      //       }\n      //     });\n    };\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  } //   // try to draw SVG natively\n  //   Konva.Image.fromURL(SOURCE, imageNode => {\n  //     layer.add(imageNode);\n  //     imageNode.setAttrs({\n  //       width: 150,\n  //       height: 150\n  //     });\n  //     layer.batchDraw();\n  //   });\n  //   // draw svg with external library\n  //   var canvas = document.createElement('canvas');\n  //   canvg(canvas, SOURCE, {\n  //     renderCallback: function() {\n  //       var image = new Konva.Image({\n  //         image: canvas,\n  //         x: 200,\n  //         width: 150,\n  //         height: 150\n  //       });\n  //       layer.add(image);\n  //       layer.batchDraw();\n  //     }\n  //   });\n\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentWillUnmount() {\n    this.v.stop();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      id: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"render\", React.createElement(\"canvas\", {\n      width: \"3000\",\n      height: \"2000\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: logo,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/coles/Documents/brett/react/shapes/app/src/componets/canvas.js"],"names":["React","Component","Canvg","Konva","width","window","innerWidth","height","innerHeight","Canvas","constructor","props","v","load","stage","Stage","container","layer","Layer","add","canvas","document","querySelector","ctx","getContext","Image","fromURL","icon","imageNode","setAttrs","batchDraw","state","componentDidMount","componentWillUnmount","stop","render","margin","logo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,UAAnB;AACA,IAAIC,MAAM,GAAGF,MAAM,CAACG,WAApB;;AACA,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAC7BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAiCnBC,CAjCmB,GAiCf,IAjCe;;AAAA,SAqCnBC,IArCmB,GAqCZ,YAAY;AACjB,UAAIC,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAV,CAAgB;AAC1BC,QAAAA,SAAS,EAAE,WADe;AAE1BZ,QAAAA,KAAK,EAAEA,KAFmB;AAG1BG,QAAAA,MAAM,EAAEA;AAHkB,OAAhB,CAAZ;AAMA,UAAIU,KAAK,GAAG,IAAId,KAAK,CAACe,KAAV,EAAZ;AACAJ,MAAAA,KAAK,CAACK,GAAN,CAAUF,KAAV;AACA,YAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,YAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ,CAViB,CAYjB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACArB,MAAAA,KAAK,CAACsB,KAAN,CAAYC,OAAZ,CAAoBC,IAApB,EAA0BC,SAAS,IAAI;AACrCX,QAAAA,KAAK,CAACE,GAAN,CAAUS,SAAV;AACAA,QAAAA,SAAS,CAACC,QAAV,CAAmB;AACjBzB,UAAAA,KAAK,EAAE,GADU;AAEjBG,UAAAA,MAAM,EAAE;AAFS,SAAnB;AAIAU,QAAAA,KAAK,CAACa,SAAN;AACD,OAPD,EA7BiB,CAsCjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAxFkB;;AAEjB,SAAKC,KAAL,GAAa;AACX3B,MAAAA,KAAK,EAAEC,MAAM,CAACC,UADH;AAEXC,MAAAA,MAAM,EAAEF,MAAM,CAACG;AAFJ,KAAb;AAID,GAP4B,CAS7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAwB,EAAAA,iBAAiB,GAAG;AAClB,SAAKnB,IAAL;AACD;;AAsDDoB,EAAAA,oBAAoB,GAAG;AACrB,SAAKrB,CAAL,CAAOsB,IAAP;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAA4B,MAAA,EAAE,EAAC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,MAAM,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAK,MAAA,GAAG,EAAEC,IAAV;AAAgB,MAAA,GAAG,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAtG4B;;AAyG/B,eAAe5B,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Canvg from \"canvg\";\nimport logo from \"./logo.svg\";\nimport icon from \"../ic.svg\";\nimport Konva from \"konva\";\nvar width = window.innerWidth;\nvar height = window.innerHeight;\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  }\n\n  //   // try to draw SVG natively\n  //   Konva.Image.fromURL(SOURCE, imageNode => {\n  //     layer.add(imageNode);\n  //     imageNode.setAttrs({\n  //       width: 150,\n  //       height: 150\n  //     });\n  //     layer.batchDraw();\n  //   });\n\n  //   // draw svg with external library\n  //   var canvas = document.createElement('canvas');\n  //   canvg(canvas, SOURCE, {\n  //     renderCallback: function() {\n  //       var image = new Konva.Image({\n  //         image: canvas,\n  //         x: 200,\n  //         width: 150,\n  //         height: 150\n  //       });\n  //       layer.add(image);\n  //       layer.batchDraw();\n  //     }\n  //   });\n\n  v = null;\n  componentDidMount() {\n    this.load();\n  }\n  load = async () => {\n    var stage = new Konva.Stage({\n      container: \"container\",\n      width: width,\n      height: height\n    });\n\n    var layer = new Konva.Layer();\n    stage.add(layer);\n    const canvas = document.querySelector(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    // this.v = await Canvg.from(ctx, icon);\n    // console.log(this.v, ctx);\n\n    // // Start SVG rendering with animations and mouse handling.\n    // ctx.fillStyle = \"black\";\n    // ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Canvg(document.getElementById(\"canvas\"), icon, {\n    //   ignoreClear: true,\n    //   ignoreMouse: true\n    // });\n    // Canvg(document.getElementById(\"canvas\"), logo, {\n    //   ignoreClear: true,\n    //   ignoreMouse: true\n    // });\n    // this.v.start();\n    // ctx.fillStyle = \"black\";\n    // ctx.fillRect(0, 0, canvas.width, canvas.height);\n    Konva.Image.fromURL(icon, imageNode => {\n      layer.add(imageNode);\n      imageNode.setAttrs({\n        width: 150,\n        height: 150\n      });\n      layer.batchDraw();\n    });\n\n    // draw svg with external library\n    //     Canvg(canvas, icon, {\n    //       renderCallback: function() {\n    //         var image = new Konva.Image({\n    //           image: canvas,\n    //           x: 200,\n    //           width: 150,\n    //           height: 150\n    //         });\n    //         layer.add(image);\n    //         layer.batchDraw();\n    //       }\n    //     });\n  };\n\n  componentWillUnmount() {\n    this.v.stop();\n  }\n  render() {\n    return (\n      <div style={{ margin: 20 }} id=\"container\">\n        render\n        <canvas width=\"3000\" height=\"2000\"></canvas>\n        <img src={logo} alt=\"\" />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}
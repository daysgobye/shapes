{"ast":null,"code":"import _classCallCheck from\"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/coles/Documents/brett/react/shapes/app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{Stage,Layer,Image}from\"react-konva\";// import useImage from 'use-image';\nvar SvgRender=/*#__PURE__*/function(_Component){_inherits(SvgRender,_Component);function SvgRender(props){var _this;_classCallCheck(this,SvgRender);_this=_possibleConstructorReturn(this,_getPrototypeOf(SvgRender).call(this,props));_this.handleLoad=function(){// after setState react-konva will update canvas and redraw the layer\n// because \"image\" property is changed\n_this.setState({image:_this.image});// if you keep same image object during source updates\n// you will have to update layer manually:\n// this.imageNode.getLayer().batchDraw();\n};_this.state={image:null};return _this;}_createClass(SvgRender,[{key:\"componentDidMount\",value:function componentDidMount(){this.loadImage();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(oldProps){if(oldProps.src!==this.props.src){this.loadImage();}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.image.removeEventListener(\"load\",this.handleLoad);}},{key:\"loadImage\",value:function loadImage(){// save to \"this\" to remove \"load\" handler on unmount\nthis.image=new window.Image();this.image.src=this.props.src;this.image.addEventListener(\"load\",this.handleLoad);}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(Image,{x:this.props.x,y:this.props.y,scaleX:this.props.scale,scaleY:this.props.scale,image:this.state.image,ref:function ref(node){_this2.imageNode=node;}});}}]);return SvgRender;}(Component);export default SvgRender;// import React, { Component } from 'react';\n// import { render } from 'react-dom';\n// import { Stage, Layer, Image } from 'react-konva';\n// import useImage from 'use-image';\n// // custom component that will handle loading image from url\n// // you may add more logic here to handle \"loading\" state\n// // or if loading is failed\n// // VERY IMPORTANT NOTES:\n// // at first we will set image state to null\n// // and then we will set it to native image instance when it is loaded\n// class URLImage extends React.Component {\n//   state = {\n//     image: null\n//   };\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener('load', this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener('load', this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <Image\n//         x={this.props.x}\n//         y={this.props.y}\n//         image={this.state.image}\n//         ref={node => {\n//           this.imageNode = node;\n//         }}\n//       />\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/coles/Documents/brett/react/shapes/app/src/componets/svgRender.js"],"names":["React","Component","Stage","Layer","Image","SvgRender","props","handleLoad","setState","image","state","loadImage","oldProps","src","removeEventListener","window","addEventListener","x","y","scale","node","imageNode"],"mappings":"8oBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,KAAT,CAAgBC,KAAhB,CAAuBC,KAAvB,KAAoC,aAApC,CACA;GACMC,CAAAA,S,mEACJ,mBAAYC,KAAZ,CAAmB,2CACjB,2EAAMA,KAAN,GADiB,MAuBnBC,UAvBmB,CAuBN,UAAM,CACjB;AACA;AACA,MAAKC,QAAL,CAAc,CACZC,KAAK,CAAE,MAAKA,KADA,CAAd,EAGA;AACA;AACA;AACD,CAhCkB,CAEjB,MAAKC,KAAL,CAAa,CACXD,KAAK,CAAE,IADI,CAAb,CAFiB,aAKlB,C,mFACmB,CAClB,KAAKE,SAAL,GACD,C,8DACkBC,Q,CAAU,CAC3B,GAAIA,QAAQ,CAACC,GAAT,GAAiB,KAAKP,KAAL,CAAWO,GAAhC,CAAqC,CACnC,KAAKF,SAAL,GACD,CACF,C,mEACsB,CACrB,KAAKF,KAAL,CAAWK,mBAAX,CAA+B,MAA/B,CAAuC,KAAKP,UAA5C,EACD,C,6CACW,CACV;AACA,KAAKE,KAAL,CAAa,GAAIM,CAAAA,MAAM,CAACX,KAAX,EAAb,CACA,KAAKK,KAAL,CAAWI,GAAX,CAAiB,KAAKP,KAAL,CAAWO,GAA5B,CACA,KAAKJ,KAAL,CAAWO,gBAAX,CAA4B,MAA5B,CAAoC,KAAKT,UAAzC,EACD,C,uCAWQ,iBACP,MACE,qBAAC,KAAD,EACE,CAAC,CAAE,KAAKD,KAAL,CAAWW,CADhB,CAEE,CAAC,CAAE,KAAKX,KAAL,CAAWY,CAFhB,CAGE,MAAM,CAAE,KAAKZ,KAAL,CAAWa,KAHrB,CAIE,MAAM,CAAE,KAAKb,KAAL,CAAWa,KAJrB,CAKE,KAAK,CAAE,KAAKT,KAAL,CAAWD,KALpB,CAME,GAAG,CAAE,aAAAW,IAAI,CAAI,CACX,MAAI,CAACC,SAAL,CAAiBD,IAAjB,CACD,CARH,EADF,CAYD,C,uBA/CqBnB,S,EAkDxB,cAAeI,CAAAA,SAAf,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport { Stage, Layer, Image } from \"react-konva\";\n// import useImage from 'use-image';\nclass SvgRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n  }\n  componentDidMount() {\n    this.loadImage();\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.src = this.props.src;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    this.setState({\n      image: this.image\n    });\n    // if you keep same image object during source updates\n    // you will have to update layer manually:\n    // this.imageNode.getLayer().batchDraw();\n  };\n  render() {\n    return (\n      <Image\n        x={this.props.x}\n        y={this.props.y}\n        scaleX={this.props.scale}\n        scaleY={this.props.scale}\n        image={this.state.image}\n        ref={node => {\n          this.imageNode = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default SvgRender;\n\n// import React, { Component } from 'react';\n// import { render } from 'react-dom';\n// import { Stage, Layer, Image } from 'react-konva';\n// import useImage from 'use-image';\n\n// // custom component that will handle loading image from url\n// // you may add more logic here to handle \"loading\" state\n// // or if loading is failed\n// // VERY IMPORTANT NOTES:\n// // at first we will set image state to null\n// // and then we will set it to native image instance when it is loaded\n// class URLImage extends React.Component {\n//   state = {\n//     image: null\n//   };\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener('load', this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener('load', this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <Image\n//         x={this.props.x}\n//         y={this.props.y}\n//         image={this.state.image}\n//         ref={node => {\n//           this.imageNode = node;\n//         }}\n//       />\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}
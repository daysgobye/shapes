{"ast":null,"code":"var _jsxFileName = \"/Users/coles/Documents/brett/react/shapes/app/src/componets/svgRender.js\";\nimport React, { Component } from \"react\";\nimport { Stage, Layer, Image } from \"react-konva\"; // import useImage from 'use-image';\n\nclass SvgRender extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLoad = () => {\n      // after setState react-konva will update canvas and redraw the layer\n      // because \"image\" property is changed\n      this.setState({\n        image: this.image\n      }); // if you keep same image object during source updates\n      // you will have to update layer manually:\n      // this.imageNode.getLayer().batchDraw();\n    };\n\n    this.state = {\n      image: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadImage();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.src = this.props.src;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n\n  render() {\n    return React.createElement(Image, {\n      x: this.props.x,\n      y: this.props.y,\n      image: this.state.image,\n      ref: node => {\n        this.imageNode = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default SvgRender; // import React, { Component } from 'react';\n// import { render } from 'react-dom';\n// import { Stage, Layer, Image } from 'react-konva';\n// import useImage from 'use-image';\n// // custom component that will handle loading image from url\n// // you may add more logic here to handle \"loading\" state\n// // or if loading is failed\n// // VERY IMPORTANT NOTES:\n// // at first we will set image state to null\n// // and then we will set it to native image instance when it is loaded\n// class URLImage extends React.Component {\n//   state = {\n//     image: null\n//   };\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener('load', this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener('load', this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <Image\n//         x={this.props.x}\n//         y={this.props.y}\n//         image={this.state.image}\n//         ref={node => {\n//           this.imageNode = node;\n//         }}\n//       />\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/coles/Documents/brett/react/shapes/app/src/componets/svgRender.js"],"names":["React","Component","Stage","Layer","Image","SvgRender","constructor","props","handleLoad","setState","image","state","componentDidMount","loadImage","componentDidUpdate","oldProps","src","componentWillUnmount","removeEventListener","window","addEventListener","render","x","y","node","imageNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,KAAvB,QAAoC,aAApC,C,CACA;;AACA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,UAvBmB,GAuBN,MAAM;AACjB;AACA;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,KAAKA;AADA,OAAd,EAHiB,CAMjB;AACA;AACA;AACD,KAhCkB;;AAEjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AACDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,SAAL;AACD;;AACDC,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAC3B,QAAIA,QAAQ,CAACC,GAAT,KAAiB,KAAKT,KAAL,CAAWS,GAAhC,EAAqC;AACnC,WAAKH,SAAL;AACD;AACF;;AACDI,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,KAAL,CAAWQ,mBAAX,CAA+B,MAA/B,EAAuC,KAAKV,UAA5C;AACD;;AACDK,EAAAA,SAAS,GAAG;AACV;AACA,SAAKH,KAAL,GAAa,IAAIS,MAAM,CAACf,KAAX,EAAb;AACA,SAAKM,KAAL,CAAWM,GAAX,GAAiB,KAAKT,KAAL,CAAWS,GAA5B;AACA,SAAKN,KAAL,CAAWU,gBAAX,CAA4B,MAA5B,EAAoC,KAAKZ,UAAzC;AACD;;AAWDa,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD;AACE,MAAA,CAAC,EAAE,KAAKd,KAAL,CAAWe,CADhB;AAEE,MAAA,CAAC,EAAE,KAAKf,KAAL,CAAWgB,CAFhB;AAGE,MAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWD,KAHpB;AAIE,MAAA,GAAG,EAAEc,IAAI,IAAI;AACX,aAAKC,SAAL,GAAiBD,IAAjB;AACD,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA7C+B;;AAgDlC,eAAenB,SAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport { Stage, Layer, Image } from \"react-konva\";\n// import useImage from 'use-image';\nclass SvgRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n  }\n  componentDidMount() {\n    this.loadImage();\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.src = this.props.src;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    this.setState({\n      image: this.image\n    });\n    // if you keep same image object during source updates\n    // you will have to update layer manually:\n    // this.imageNode.getLayer().batchDraw();\n  };\n  render() {\n    return (\n      <Image\n        x={this.props.x}\n        y={this.props.y}\n        image={this.state.image}\n        ref={node => {\n          this.imageNode = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default SvgRender;\n\n// import React, { Component } from 'react';\n// import { render } from 'react-dom';\n// import { Stage, Layer, Image } from 'react-konva';\n// import useImage from 'use-image';\n\n// // custom component that will handle loading image from url\n// // you may add more logic here to handle \"loading\" state\n// // or if loading is failed\n// // VERY IMPORTANT NOTES:\n// // at first we will set image state to null\n// // and then we will set it to native image instance when it is loaded\n// class URLImage extends React.Component {\n//   state = {\n//     image: null\n//   };\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener('load', this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener('load', this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <Image\n//         x={this.props.x}\n//         y={this.props.y}\n//         image={this.state.image}\n//         ref={node => {\n//           this.imageNode = node;\n//         }}\n//       />\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["componets/svgRender.js","componets/dlButton.js","helpers.js/placement.js","componets/canvas.js","classes/shape.js","componets/uploadShape.js","componets/editShape.js","componets/notes.js","componets/shapes.js","componets/home.js","App.js","serviceWorker.js","index.js"],"names":["SvgRender","props","handleLoad","setState","image","state","this","loadImage","oldProps","src","removeEventListener","window","Image","addEventListener","key","x","y","scaleX","scale","scaleY","width","height","ref","node","imageNode","Component","DlButton","textFile","makeTextFile","text","data","Blob","type","URL","revokeObjectURL","createObjectURL","saveFile","downloadURI","JSON","stringify","savedRender","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","saveImage","ctx","stageRef","current","children","getContext","console","log","dataURL","getStage","toDataURL","pixelRatio","Button","size","className","color","onClick","id","placeInZone","cap","shape","shapeWidth","minSize","randomInRange","min","max","Math","floor","random","checkOverLap","pos","Canvas","posAllShapes","shapes","renderArrayOfShapes","array","loopShape","count","length","numToRender","innerWidth","sideBar","innerHeight","noIn","otherBodys","i","flat","push","shapeRender","map","React","createRef","fill","style","display","flexDirection","imgName","toObj","maxSize","setPos","upDateNum","num","upDateMinSize","imageName","UploadShape","makeShape","e","reader","FileReader","readAsText","target","files","onload","event","svgParts","result","split","firstPart","splice","join","svgFull","Shape","addShape","fileRef","accept","onChange","EditShape","onUpdateScale","scaleRef","value","updateShape","onUpdateAmount","amountToSpawnRef","Container","Row","Col","xs","alt","Notes","Shapes","Home","s","toggle","isOpen","Modal","ModalHeader","ModalBody","ModalFooter","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1ed0356.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Stage, Layer, Image } from \"react-konva\";\n// import useImage from 'use-image';\nclass SvgRender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n  }\n  componentDidMount() {\n    this.loadImage();\n  }\n  componentDidUpdate(oldProps) {\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    }\n  }\n  componentWillUnmount() {\n    this.image.removeEventListener(\"load\", this.handleLoad);\n  }\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.src = this.props.src;\n    this.image.addEventListener(\"load\", this.handleLoad);\n  }\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    this.setState({\n      image: this.image\n    });\n    // if you keep same image object during source updates\n    // you will have to update layer manually:\n    // this.imageNode.getLayer().batchDraw();\n  };\n  render() {\n    return (\n      <Image\n        key={this.props.key}\n        x={this.props.x}\n        y={this.props.y}\n        scaleX={this.props.scale}\n        scaleY={this.props.scale}\n        image={this.state.image}\n        width={100}\n        height={100}\n        ref={node => {\n          this.imageNode = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default SvgRender;\n\n// import React, { Component } from 'react';\n// import { render } from 'react-dom';\n// import { Stage, Layer, Image } from 'react-konva';\n// import useImage from 'use-image';\n\n// // custom component that will handle loading image from url\n// // you may add more logic here to handle \"loading\" state\n// // or if loading is failed\n// // VERY IMPORTANT NOTES:\n// // at first we will set image state to null\n// // and then we will set it to native image instance when it is loaded\n// class URLImage extends React.Component {\n//   state = {\n//     image: null\n//   };\n//   componentDidMount() {\n//     this.loadImage();\n//   }\n//   componentDidUpdate(oldProps) {\n//     if (oldProps.src !== this.props.src) {\n//       this.loadImage();\n//     }\n//   }\n//   componentWillUnmount() {\n//     this.image.removeEventListener('load', this.handleLoad);\n//   }\n//   loadImage() {\n//     // save to \"this\" to remove \"load\" handler on unmount\n//     this.image = new window.Image();\n//     this.image.src = this.props.src;\n//     this.image.addEventListener('load', this.handleLoad);\n//   }\n//   handleLoad = () => {\n//     // after setState react-konva will update canvas and redraw the layer\n//     // because \"image\" property is changed\n//     this.setState({\n//       image: this.image\n//     });\n//     // if you keep same image object during source updates\n//     // you will have to update layer manually:\n//     // this.imageNode.getLayer().batchDraw();\n//   };\n//   render() {\n//     return (\n//       <Image\n//         x={this.props.x}\n//         y={this.props.y}\n//         image={this.state.image}\n//         ref={node => {\n//           this.imageNode = node;\n//         }}\n//       />\n//     );\n//   }\n// }\n","import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\n\nclass DlButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  textFile = null;\n\n  makeTextFile = text => {\n    var data = new Blob([text], { type: \"text/plain\" });\n\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    if (this.textFile !== null) {\n      window.URL.revokeObjectURL(this.textFile);\n    }\n    this.textFile = window.URL.createObjectURL(data);\n    // returns a URL you can use as a href\n    return this.textFile;\n  };\n\n  saveFile = () => {\n    this.downloadURI(\n      this.makeTextFile(JSON.stringify(this.props.savedRender)),\n      \"shapes.json\"\n    );\n  };\n  downloadURI = (uri, name) => {\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  saveImage = () => {\n    const ctx = this.props.stageRef.current.children[1].getContext(\"2d\");\n    console.log(ctx);\n\n    const dataURL = this.props.stageRef.current\n      .getStage()\n      .toDataURL({ pixelRatio: 3 });\n    this.downloadURI(dataURL, \"stage.png\");\n  };\n\n  render() {\n    return (\n      <>\n        <Button\n          size=\"sm\"\n          className=\"m-1\"\n          color=\"primary\"\n          onClick={this.saveImage}\n        >\n          Save Image\n        </Button>\n        <Button\n          size=\"sm\"\n          className=\"m-1\"\n          color=\"primary\"\n          onClick={this.saveFile}\n        >\n          Save set\n        </Button>\n\n        <div id=\"create\"></div>\n      </>\n    );\n  }\n}\n\nexport default DlButton;\n","export const placement = (shapes, width, height) => {\n  return shapes.map(shape => {\n    return {\n      ...shape,\n      pos: { x: randomInRange(1, width), y: randomInRange(1, height) }\n    };\n  });\n};\nexport const placeInZone = (cap, shape) => {\n  const shapeWidth = 100 * shape.minSize;\n  return randomInRange(10, cap - shapeWidth);\n};\n\nexport const randomInRange = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n\nexport const placementInter = (cap, otherBodys, count = 1) => {\n  let newPos = {\n    x: randomInRange(100, cap.innerWidth - 700),\n    y: randomInRange(100, cap.innerHeight - 100)\n  };\n\n  for (let i = 0; i < otherBodys.flat().length; i++) {\n    const pos = otherBodys.flat()[i];\n    if (\n      newPos.x > pos.pos.x &&\n      newPos.x < pos.pos.x + 120 &&\n      newPos.y > pos.pos.y &&\n      newPos.y < pos.pos.y + 120\n    ) {\n      console.log(\"I got fucked\");\n      if (count < 10) {\n        placementInter(cap, otherBodys, count + 1);\n      } else {\n        console.log(\"offset\");\n\n        newPos = {\n          x: -100,\n          y: -100\n        };\n      }\n    }\n  }\n  console.log(newPos.x);\n\n  return newPos;\n};\n\nexport const checkOverLap = (y, x, pos, shape) => {\n  const shapeWidth = 100 * shape.minSize;\n  return (\n    x > pos.pos.x - shapeWidth &&\n    x < pos.pos.x + shapeWidth &&\n    y > pos.pos.y - shapeWidth &&\n    y < pos.pos.y + shapeWidth\n  );\n};\n","import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nimport Canvg from \"canvg\";\n// import logo from \"./logo.svg\";\n// import icon from \"../ic.svg\";\nimport Konva from \"konva\";\nimport { Stage, Layer, Image, Rect } from \"react-konva\";\nimport SvgRender from \"./svgRender\";\nimport DlButton from \"./dlButton\";\nimport {\n  placement,\n  placeInZone,\n  placementInter,\n  checkOverLap\n} from \"../helpers.js/placement\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { shapes: [], sideBar: 210 };\n    this.stageRef = React.createRef();\n  }\n  posAllShapes = () => {\n    this.savedRender = [];\n    this.setState({\n      shapes: this.props.shapes\n    });\n  };\n  savedRender = [];\n  renderArrayOfShapes = shape => {\n    let array = [];\n    let loopShape = [];\n    let count = 0;\n    console.log(shape, \"I need this shape flag\");\n\n    while (loopShape.length < shape.numToRender && count < 1000) {\n      let x = placeInZone(window.innerWidth - this.state.sideBar, shape);\n      let y = placeInZone(window.innerHeight, shape);\n      let noIn = true;\n      const overlap = 100 * shape.scale;\n      // let pos=placementInter( window,[...this.savedRender,...loopShape] )\n      let otherBodys = [...loopShape, ...this.savedRender];\n      for (let i = 0; i < otherBodys.flat().length; i++) {\n        const pos = otherBodys.flat()[i];\n        if (pos.pos && checkOverLap(y, x, pos, shape)) {\n          console.log(\"overlap\");\n          noIn = false;\n          count++;\n        }\n      }\n      if (noIn) {\n        array.push(\n          <SvgRender\n            key={`img${array.length * y * x}`}\n            src={shape.image}\n            x={x}\n            y={y}\n            scale={shape.minSize}\n          />\n        );\n        loopShape.push({ ...shape, pos: { x, y } });\n      }\n    }\n    this.savedRender.push(loopShape);\n    return array;\n  };\n\n  shapeRender = () => {\n    const render = this.state.shapes.map(shape => {\n      return this.renderArrayOfShapes(shape);\n    });\n    // this.savedRender = render;\n    return render;\n  };\n\n  render() {\n    return (\n      <>\n        <Stage\n          ref={this.stageRef}\n          width={window.innerWidth - this.state.sideBar}\n          height={window.innerHeight}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={window.innerWidth - this.state.sideBar}\n              height={window.innerHeight}\n              fill=\"black\"\n            />\n          </Layer>\n          <Layer>\n            {this.shapeRender()}\n            {/* <SvgRender src={icon} x={300} y={800} scale={8} /> */}\n          </Layer>\n        </Stage>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <DlButton\n            stageRef={this.stageRef}\n            savedRender={this.savedRender}\n          ></DlButton>\n          <Button\n            color=\"danger\"\n            className=\"m-1\"\n            size=\"sm\"\n            onClick={this.posAllShapes}\n          >\n            mix\n          </Button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Canvas;\n","class shape {\n  constructor(image, imgName) {\n    this.image = image;\n    this.imageName = imgName;\n    this.pos = { x: 1, y: 1 };\n    this.color = \"#fffff\";\n    this.minSize = 1;\n    this.maxSize = 1;\n    this.numToRender = 1;\n  }\n  toObj = () => {\n    return {\n      image: this.image,\n      pos: this.pos,\n      color: this.color,\n      minSize: this.minSize,\n      maxSize: this.maxSize\n    };\n  };\n  setPos = pos => {\n    this.pos = pos;\n  };\n  upDateNum = num => {\n    this.numToRender = num;\n    return this;\n  };\n  upDateMinSize = num => {\n    this.minSize = num;\n    return this;\n  };\n}\nexport default shape;\n","import React, { Component } from \"react\";\nimport Shape from \"../classes/shape\";\nclass UploadShape extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.fileRef = React.createRef();\n  }\n  makeShape = e => {\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0]);\n    const name = e.target.files[0].name;\n\n    reader.onload = event => {\n      const contents = event.target.result;\n      const svgParts = contents.split(\"<\");\n      let firstPart = svgParts[1].split(\" \");\n      firstPart.splice(2, 0, `fill=\"white\"`);\n      firstPart = firstPart.join(\" \");\n      svgParts.splice(1, 1, firstPart);\n      const svgFull = svgParts.join(\"<\");\n      const shape = new Shape(\n        URL.createObjectURL(\n          new Blob([svgFull], { type: \"image/svg+xml;charset=utf-8\" })\n        ),\n        name\n      );\n      this.props.addShape(shape);\n    };\n  };\n  render() {\n    return (\n      <div>\n        <input\n          type=\"file\"\n          name=\"\"\n          id=\"\"\n          accept=\".svg\"\n          onChange={e => this.makeShape(e)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default UploadShape;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Input } from \"reactstrap\";\nimport shape from \"../classes/shape\";\nclass EditShape extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.amountToSpawnRef = React.createRef();\n    this.scaleRef = React.createRef();\n  }\n  onUpdateScale = () => {\n    console.log(this.scaleRef.current.value);\n\n    this.props.updateShape(\n      this.props.shape.upDateMinSize(this.scaleRef.current.value)\n    );\n  };\n  onUpdateAmount = () => {\n    this.props.updateShape(\n      this.props.shape.upDateNum(this.amountToSpawnRef.current.value)\n    );\n  };\n  render() {\n    const { shape } = this.props;\n    return (\n      <Container key={this.props.key}>\n        {/* {shape.color} */}\n        {/* {shape.image} */}\n        <Row>\n          <Col xs=\"2\" className=\"bg-secondary\">\n            <img src={shape.image} width={50} height={50} alt=\"\" />\n          </Col>\n          <Col xs=\"5\">\n            <label>\n              number to spawn:\n              <input\n                type=\"number\"\n                name=\"number\"\n                className=\"form-control\"\n                onChange={this.onUpdateAmount}\n                ref={this.amountToSpawnRef}\n                value={shape.numToRender}\n              />\n            </label>\n          </Col>\n          <Col xs=\"5\">\n            <label>\n              scale:\n              <input\n                type=\"number\"\n                name=\"number\"\n                className=\"form-control\"\n                ref={this.scaleRef}\n                onChange={this.onUpdateScale}\n                value={shape.minSize}\n              />\n            </label>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default EditShape;\n","import React, { Component } from \"react\";\nclass Notes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h5>some things are missing / not ready yet</h5>\n        <p>\n          color, random scale, overlap control's, phone support,\n          <br /> replay from saved files, some svgs are broken, exporting svg\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Notes;\n","import React, { Component } from \"react\";\nimport UploadShape from \"./uploadShape\";\nimport EditShape from \"./editShape\";\nimport Notes from \"./notes\";\nclass Shapes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.shapes.map((shape, i) => (\n          <EditShape\n            updateShape={this.props.updateShape}\n            shape={shape}\n            key={i}\n          ></EditShape>\n        ))}\n        <UploadShape addShape={this.props.addShape}></UploadShape>\n        <Notes></Notes>\n      </div>\n    );\n  }\n}\n\nexport default Shapes;\n","import React, { Component } from \"react\";\nimport { Grid, box } from \"@material-ui/core\";\nimport Canvas from \"./canvas\";\nimport Shapes from \"./shapes\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shapes: [],\n      isOpen: false\n    };\n  }\n  addShape = shape => {\n    const shapes = [shape, ...this.state.shapes];\n    this.setState({ shapes });\n  };\n  updateShape = shape => {\n    const shapes = this.state.shapes.map(s =>\n      s.image === shape.image ? shape : s\n    );\n    this.setState({ shapes });\n  };\n  toggle = () => this.setState({ isOpen: !this.state.isOpen });\n  render() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div style={{ display: \"flex\" }}>\n          <Canvas shapes={this.state.shapes}></Canvas>\n        </div>\n        <div style={{ display: \"flex\" }}>\n          <div>\n            <Button className=\"m-1\" size=\"sm\" onClick={this.toggle}>\n              add A Shape\n            </Button>\n          </div>\n        </div>\n\n        <Modal isOpen={this.state.isOpen} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>Add More Shapes</ModalHeader>\n          <ModalBody>\n            <Shapes\n              shapes={this.state.shapes}\n              addShape={this.addShape}\n              updateShape={this.updateShape}\n            ></Shapes>\n          </ModalBody>\n          <ModalFooter>\n            <Button className=\"m-1\" color=\"primary\" onClick={this.toggle}>\n              Done\n            </Button>{\" \"}\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./componets/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}